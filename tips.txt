use
console.dir(object_name)
to view the full attributes of an object

STYLE TAG:-
<style >
  .red_stuff{
    background-color: red;
    color: white;
  }
  .blue_stuff{
    background-color: blue;
    color: white;
  }
</style>

To view the DOM
go to any website and in console type "document"
and to see the actual object use
console.dir(document)


BOOTSTRAP - <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

JQUERY :-
<script
src="http://code.jquery.com/jquery-3.3.1.js"
integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60="
crossorigin="anonymous"></script>


10/04/2018
setInterval("changeHeaderColor()",500);
calls that method every 500 millisecond


CONDA and Stuff

i created a virtual env using CONDA
conda create --name myDjangoEnv django
which created a virtual env and also installed python and other packages which include django as well

django ENV:-
activate myDjangoEnv
PATH:- C:\Users\Admins\Anaconda3\envs\myDjangoEnv
conda info --envs


When we install Django, it also installs a command line tool called
django-admin


creating project:-
django-admin startproject first_project


__inint__.py Lets python know that this directory can be treated as a package
settings.py - We keep all our settings here
urls.py --  contains all the urls...we have to use regex here
wsgi.py -- this act as web server gateway interface , helps to deploy web app to production
python manage.py runserver

manage.py  it is one of the important file, we are going to use it a lot

python manage.py runserver -- runs the dev server
you have 14 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contentty
pes, sessions.

A migration is related to databases
A migration allows us to move databases from one design to another and its reversible...for example...adding or removing a column


Django Apps....we generally create many django apps which we can plugged together or plug into other django projects
python manage.py startapp first_app

  views.py ->
  model.py ->


from django.conf.urls import include -- for app based urls.py

Model foreign key
question = models.ForeignKey(Question, on_delete=models.CASCADE)  -->Question here is a class

FIRST PROJECT > first App
_______________________________________________________________________
TO include static files folder just like template

SETTINGS.PY

  STATIC_URL = '/static/'
  STATICFILES_DIRS = [
      STATIC_DIR,
  ]

VIEW.py

from django.http import HttpResponse -- for normal response
just return it

else use render
my_dict = {'insert_me':'I am from first_app views.py'}
return render(request,'first_app/index.html',context=my_dict )


HTML(index.html)

To use the static content in HTML
{% load staticfiles %}

first_app/index.html -- we have only specified the path of template and not first app so we included it here
Now in HTML we have this static content(context) as...
{{insert_me}}
we find the key in the html and not the varible itself

to include an image and css from the static folder we have

<link rel="stylesheet" href="{% static "css/myStyle.css" %}"> --> so this becomes static/css/myStyle.css
<img src="{% static "images/coins.jpg" %}" alt="Bitconnnnnnnecctttttttt!!!!!!!!!">

URL.py
from django.conf.urls import include  #ADDED so that urls are now taken from the apps itself
from first_app import views

path('',views.index, name = 'index'),  #Added the view here  --> Observe the syntax...name can be used at other places?
path('help/',include('second_app.urls'), name = 'sec'),   --> using custom URL.py from secondapp..better way

from django.conf.urls import url
from second_app import views2
from django.urls import path
urlpatterns = [
path('',views2.help, name = 'help'),
]
__________________________________________________________________________
Polling project Starts here :-

To call the view, we need to map it to a URL - and for this we need a URLconf
We can add an include function and make it call a new url.py which we will make in app
The include() function allows referencing other URLconfs. Whenever Django encounters include(),
 it chops off whatever part of the URL
 matched up to that point and sends the remaining string to the included URLconf for further processing.

 The idea behind include() is to make it easy to plug-and-play URLs.
  Since polls are in their own URLconf (polls/urls.py), they can be placed under “/polls/”, or under “/fun_polls/”,
  or under “/content/polls/”, or any other path root, and the app will still work.


path() -- The path() function is passed four arguments, two required: route and view, and two optional: kwargs, and name.
 At this point, it’s worth reviewing what these arguments are for.

1.) path() argument: route¶
Route is a string that contains a URL pattern. When processing a request,
Django starts at the first pattern in urlpatterns and makes its way down the list,
comparing the requested URL against each pattern until it finds one that matches.

2.)path() argument: view¶
When Django finds a matching pattern, it calls the specified view function with an HttpRequest object as the first argument
and any “captured” values from the route as keyword arguments

3.) path() argument: kwargs¶
Arbitrary keyword arguments can be passed in a dictionary to the target view.

4.)path() argument: name¶
Naming your URL lets you refer to it unambiguously from elsewhere in Django, especially from within templates.
This powerful feature allows you to make global changes to the URL patterns of your project while only touching a single file.

db - https://docs.djangoproject.com/en/2.0/intro/tutorial02/


settings.py:-
By default, INSTALLED_APPS contains the following apps, all of which come with Django:
django.contrib.admin – The admin site. You’ll use it shortly.
django.contrib.auth – An authentication system.
django.contrib.contenttypes – A framework for content types.
django.contrib.sessions – A session framework.
django.contrib.messages – A messaging framework.
django.contrib.staticfiles – A framework for managing static files.

Some of these applications make use of at least one database table, though,
so we need to create the tables in the database before we can use them.
To do that, run the following command:

$python manage.py migrate  #also removes the migration warnings

The migrate command looks at the INSTALLED_APPS setting and creates any
necessary database tables according to the database settings in your mysite/settings.py
file and the database migrations shipped with the app


Creating models
Now we’ll define your models – essentially, your database layout, with additional metadata.

A model is the single, definitive source of truth about your data.
It contains the essential fields and behaviors of the data you’re storing.
Django follows the DRY(dont repeat yourself) Principle.
 The goal is to define your data model in one place and automatically derive things from it.

This includes the migrations - unlike in Ruby On Rails, for example, migrations are entirely derived from your models file,
and are essentially just a history that Django can roll through to update your database schema to match your current models.

added 2 models..check out the models.py

$python manage.py makemigrations polling_app

By running makemigrations, you’re telling Django that you’ve made some changes to your models (in this case,
you’ve made new ones) and that you’d like the changes to be stored as a migration.

Migrations are how Django stores changes to your models (and thus your database schema) -
they’re just files on disk. You can read the migration for your new model if you like;
it’s the file polls/migrations/0001_initial.py. Don’t worry, you’re not expected to read them
every time Django makes one,but they’re designed to be human-editable in case you
want to manually tweak how Django changes things.


There’s a command that will run the migrations for you and manage your database schema automatically -
that’s called migrate, and we’ll come to it in a moment - but first,
let’s see what SQL that migration would run. The sqlmigrate command takes migration names and returns their SQL:
$python manage.py sqlmigrate polls 0001


The migrate command takes all the migrations that haven’t been applied (Django tracks which ones
are applied using a special table in your database called django_migrations)
and runs them against your database - essentially, synchronizing the changes you made to your models with the schema in the database.

Migrations are very powerful and let you change your models over time, as you develop your project, without the need to
delete your database or tables and make new ones - it specializes in upgrading your database live, without losing data.
We’ll cover them in more depth in a later part of the tutorial, but for now, remember the three-step guide to making model changes:
*python manage.py migrate
* Change your models (in models.py).
* Run python manage.py makemigrations to create migrations for those changes
* Run python manage.py migrate to apply those changes to the database.

The reason that there are separate commands to make and apply migrations is
because you’ll commit migrations to your version control system and ship them with your app;
they not only make your development easier, they’re also useable by other developers and in production.

_____________________________________________________________________________________________________________
s
PYTHON SHELL with Django in EnvVar
$ python manage.py shell
We’re using this instead of simply typing “python”, because manage.py sets the
DJANGO_SETTINGS_MODULE environment variable,which gives Django the Python import path to your mysite/settings.py file.

>>>from first_app import models
>>>print(models.Topic.objects.all())
>>> t = models.Topic(top_name = "Social Network")
>>> t.save()


Admin Panel:-
add models to admins.py
admin.site.register(AccessRecord)

now create a superuser by
python manage.py createsuperuser
Name - Shaan
email - Shaan.test@abcd.com
Pass - shaantest1234


FAKER module for fake data in data because
pip install Faker

docs:- faker.readthedocs.io

MODELS:-
view.py
different methods of accessing data from database so far

1.) webpg = AccessRecord.objects.order_by('date')

2.) name = Name.objects.all()
name_dict = {'first_n':name}

3.) ddata = deepInfo.objects.filter(dname__name=coin_name) #dname is taking its value from name (foreign key)
instead of taking all the objects like above...get only a particular column

4.) data = BasicInfo.objects.filter(name = coin_name).values_list('symbol',flat=True)
same like above....but here we are getting some other column value..'Bitcoin' > 'BTC'

in html
{% if access_records %}
{% for acc in access_records %}
{{acc.name}}
{% endfor %}
{% endif %}

TEMPLATES :- The templates will contain the static parts of an HTML page
make a template in manage.py level and define the HTML there now
we will use a render function in index function which we define in the views
templates have their own tags as dict which is pretty weird

1st making changes to settings.py to include the templates


Modes - Views - TEMPLATES

1.) import models to the view
2.) use view to query the model data
3.) Pass the result from the model to the template
4.) Edit the template so that it is ready to accept and display the data from the model
5.) Map the URL to the view



FORMS
forms are made just like models
for forms we do the following things
1.) Create a forms.py file and add form fields which are similiar to models field (CharField etc) (check the forms.py)

checkout coininfocap app to see the usuage of many things

from django import forms
from django.core import validators
class FormName(forms.Form):
  email = forms.EmailField()
  text = forms.CharField(widget=forms.Textarea) #to get the html style text area

in view.py
form = forms.FormName()
the basic steps
if request.method == 'POST':  #if it is a POST call
      form = forms.FormName(request.POST)
      if form.is_valid(): #and if the form is a valid form
        # form.cleaned_data['name'] accessing the record?
checkout forms.py of djangolevel3 basicforms for botcatcher and stuff


MODEL forms
class UserForm(forms.ModelForm):
    class Meta:
        model = Name  #inline class..name model should be there
        fields =  "__all__"  #to include all the columns.....take all the fields from the model and place them into the form
    # exclude = ['field1',2] to exclude field
    # fields = ('fields1',)

Saving - user_form.save()
level 4

Using the anchor tag in html

use a varable called app_name inside urls.py ,app_name = 'basic_app' now django automatically searches for a variable
called app name and maps the url accordingly
example:- <a href="{% url 'basic_app:other' %}">Other Page</a>
          <a href="{% url 'index' %}">INDEX PAGE</a>

Inheritance:-
A base template can be used which can be inherited in all the other html files

can be used as

{% block body_block %}

{% endblock %}

everything outside this is inherited
similarly there are other block like head block etc

just add
<!DOCTYPE html>
{% extends "basic_app/base.html" %}
{% block body_block %}
<h1>{{ num|add:30 }}</h1>
{% endblock %}

in other Html files nd we are done

Template filters
WE can also perform operations on data that we inject using views or models or forms
using filter....filters are some python functions...we can even make the custom filters

eg:- <h1>{{ num|add:30 }}</h1>
adds 30 to num

ex- Custom filters
1.) make a directory in the app folder as templatetags
2.) make __init__.py
3.) make another pyhton files
4.) check out the content in level 4...decorator used

HTML:-
<h1>{{ name|upper }} to </h1>
<h1>{{ name|cut:'Hello' }}</h1>

Code:-
from django import template

register = template.Library()
#need to register this

@register.filter(name='cut')  #passing a name which will act as our filter name
def cut(value,args):
    """
    This cuts out all the args from value
    """
    return value.replace(args,'')


Django Level 5:-

Passwords
We use some inbuilt apps to achieve that...
add
django.contrib.auth
django.contrib.contenttypes
to in INSTALLED_APPS of settings.py
migrate the db to add those apps


Never Store passwords in plain texts
always encrypt them
django uses in built PBKDF2 with an SHA256 HASH
but we can also use more advanced like bcrypt and django[argon2]

pip install bcrypt
pip install django[argon2]

we have
templates folder static folder and similarly media folder
MEDIA folder is used to store the data that belogs to the user..like images text etc


include it in the settings file

STATIC_URL = '/static/'
STATICFILES_DIRS = [STATIC_DIR,]


#MEDIA
MEDIA_ROOT = MEDIA_DIR
MEDIA_URL = '/media/'



PASSWORD_HASHER -- We decide what hashing algos we are supporting...so we include a list of
algos...so whichever is supported by the server that is used


# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

PASSWORD_HASHER =[
        'django.contrib.auth.hashers.Argon2PasswordHasher',  #most powerful
        'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
        'django.contrib.auth.hashers.BCryptPasswordHasher',
        'django.contrib.auth.hashers.PBKDF2PasswordHasher',
        'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
]


In order to work with images
models.ImageField(upload_to='profile_pics')
we need to install pillow
pip install pillow



login
checkout view.py of level 5
from django.contrib.auth.decorators import login_required #add the decorator to perform certain actions only after
login_required
def special(request):
    return HttpResponse('You are logged in , Awesome')

@login_required
def user_logout(request):
    logout(request)
    return HttpResponseRedirect(reverse('index'))



CBV's
Class Based views

we usually make a method in views.py to call an html but we can use classes as well..which is a better alternative

import this in views:
from django.views.generic import View
views.py
class CBV(View):
    def get(self,request):
        return HttpResponse("Class Based Views")


in urls
path('',views.CBV.as_view()), # class based views way

just add templateViews to call the templates from the class based views
from django.views.generic import View,TemplateView


class IndexView(TemplateView):
    template_name = 'index.html'

As simple as that

Now lets inject the data( the context dictionary)
like this:-

def get_context_data(self,**kwargs):
    context = super().get_context_data(**kwargs)
    context['injectme'] = 'BASIC INJECTION'
    return context


ListView and Detail View for Models
we have imported those in views.py and also made a new folder as templates inside the app folder
and included some htmls in that

we have made 2 models and made 2 classes in views.py

using List views and detail views we dont have to make model objects they do it for us...we just need to use them

now we also use names for urls in urls.py..
path('',views.SchoolListView.as_view(),name='list')
<li> <a class = "navbar-brand" href="{% url 'basic_app:list'%}">Schools</a> </li>

also we are making urls on the fly using primary key which is made by django itself

    re_path(r'(?P<pk>[-\w]+)/$',views.SchoolDetailView.as_view(),name='basic_app1'),

this is the syntax for named views in python in regex ?P<name> regex
/$ - is to add / at the end and $ signifies ?(idk) end in

^.* //Start of string followed by zero or more of any character (except line break)

.*$ //Zero or more of any character (except line break) followed by end of string

. means "any character".
* means "any number of this".
.* therefore means an arbitrary string of arbitrary length.
^ indicates the beginning of the string.
$ indicates the end of the string.

#CRUD

Create Retrive Update Delete

So basically we are foing to use CreateView, UpdateView , DeleteView

CreateView - For Creating new entries in db
UpdateView - for updating Existing entries in db
DeleteView - To delete the entries or rows in db

CreateView class added in views.py
Error1 : ImproperlyConfigured at /basic_app/create
Using ModelFormMixin (base class of SchoolCreateView) without the 'fields' attribute is prohibited.

Solution :- add the fields which you want to modify
fields = (name,principal,location)


Error 2:- TemplateDoesNotExist at /basic_app/create
basic_app/school_form.html

Solution:- We have not created a template so lets create one and give it a name as suggested by django school_form.html

so we have a form created by CreateView and we can use it to create new schools


Error 3:
ImproperlyConfigured at /basic_app/create
No URL to redirect to.  Either provide a url or define a get_absolute_url method on the Model.

Sol:- Here we dont have anywhere to go, lets do what django says "define a get_absolute_url method on the Model."

just ADDED to School MODEL
from django.urls import reverse

def get_absolute_url (self):
  return reverse("basic_app:detail",kwargs={'pk':self.pk})


So now we have a returning page, which is school detail with newly added school ID


UpdateView - for updating the entries in DB

DeleteView -

They are simple

class SchoolUpdateView(UpdateView):
    fields = ('name','principal')
    model = School

class SchoolDeleteView(DeleteView):
    model = School
    success_url = reverse_lazy("basic_app:list")

  # we have to make sure that the post is deleted then take the user where ever we want so for that
  # we do lazyreverse

here we notice that we are not giving any template names...of the html files
but still the view is picking up the correct html/templates files
How?

Well they have some default file names ad context names
so its that
like for list view we have
school_list.html
etc etc


CLONE PROJECT:-

def get_absolute_url (self):
    return reverse("post_list")

reverse in models- Where should out website take the user
reverse('page',kwargs:pk)

in settings.py
LOGIN_REDIRECT_URL = '/'
where to go after login


for SQL like query
def get_queryset(self):
      return Post.objects.filter(published_date__lte=timezone.now().order_by('-published_date'))

select * from post where published date <=today's date orderby published dat(ascending order)

USING our own widgits in the forms
class PostForm(form.ModelForm):

    class Meta():
        model = Post
        fields = ('author','title','text')

        widgets = {
        'title':forms.TextInput(attrs={'class':'textinputclass'}) #class here is a css styling class..out class
        'text':forms.TextArea(attrs={'class': 'editable medium-editor-textarea postcontent'})


from django.contrib.auth import views
(login logout in urls.py of mysite)
